{"ast":null,"code":"import { create } from \"apisauce\";\nconst api = create({\n  baseURL: \"https://jsonplaceholder.typicode.com\",\n  headers: {\n    Accept: 'application/vnd.github.v3+json'\n  }\n});\nexport const getCardApi = async () => {\n  let response = {\n    data: null,\n    error: \"\"\n  };\n  await api.get(\"/posts\").then(apiResponse => {\n    console.log(apiResponse);\n\n    if (apiResponse.ok) {\n      response.data = apiResponse.data;\n    } else {\n      response.error = \"Unable to fetch data\";\n      console.log(\"response data\", response.data);\n    }\n  }).catch(error => {\n    response.error = error;\n  });\n  return response;\n};\nexport const getCommentsApi = async () => {\n  let commentresponse = {\n    commentdata: null,\n    error: \"\"\n  };\n  await api.get(\"/comments\").then(apiResponse => {\n    console.log(\"apiResponse\", apiResponse);\n\n    if (apiResponse.ok) {\n      commentresponse.data = apiResponse.data;\n    } else {\n      commentresponse.error = \"Unable to fetch data\";\n      console.log(\"commentresponse data\", commentresponse.data);\n    }\n  }).catch(error => {\n    commentresponse.error = error;\n  });\n  return commentresponse;\n};\nexport const getAuthorsApi = async () => {\n  let authorresponse = {\n    data: null,\n    error: \"\"\n  };\n  console.log(\"authorresponse\", authorresponse);\n  await api.get(\"/users\").then(apiResponse => {\n    if (apiResponse.ok) {\n      authorresponse.authordata = apiResponse.data;\n      console.log(\"apiResponse\", apiResponse.data);\n    } else {\n      authorresponse.error = \"Unable to fetch data\";\n      console.log(\"authorresponse data\", authorresponse.data);\n    }\n  }).catch(error => {\n    console.log(\"authorresponse error\", error);\n    authorresponse.error = error;\n  });\n  console.log(\"apiResponse\", authorresponse);\n  return authorresponse;\n};","map":{"version":3,"sources":["/Users/banshi/Documents/techTask1/techtask-1-app/src/apisause.js"],"names":["create","api","baseURL","headers","Accept","getCardApi","response","data","error","get","then","apiResponse","console","log","ok","catch","getCommentsApi","commentresponse","commentdata","getAuthorsApi","authorresponse","authordata"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA,MAAMC,GAAG,GAAGD,MAAM,CAAC;AACfE,EAAAA,OAAO,EAAE,sCADM;AAEfC,EAAAA,OAAO,EAAE;AACLC,IAAAA,MAAM,EAAE;AADH;AAFM,CAAD,CAAlB;AAMA,OAAO,MAAMC,UAAU,GAAG,YAAY;AAClC,MAAIC,QAAQ,GAAG;AAAEC,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAAf;AACA,QAAMP,GAAG,CACJQ,GADC,CACG,QADH,EAEDC,IAFC,CAEKC,WAAD,IAAiB;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;;AACA,QAAIA,WAAW,CAACG,EAAhB,EAAoB;AAChBR,MAAAA,QAAQ,CAACC,IAAT,GAAgBI,WAAW,CAACJ,IAA5B;AACH,KAFD,MAEO;AACHD,MAAAA,QAAQ,CAACE,KAAT,GAAiB,sBAAjB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BP,QAAQ,CAACC,IAAtC;AACH;AACJ,GAVC,EAWDQ,KAXC,CAWMP,KAAD,IAAW;AACdF,IAAAA,QAAQ,CAACE,KAAT,GAAiBA,KAAjB;AACH,GAbC,CAAN;AAcA,SAAOF,QAAP;AACH,CAjBM;AAkBP,OAAO,MAAMU,cAAc,GAAG,YAAY;AACtC,MAAIC,eAAe,GAAG;AAAEC,IAAAA,WAAW,EAAE,IAAf;AAAqBV,IAAAA,KAAK,EAAE;AAA5B,GAAtB;AACA,QAAMP,GAAG,CACJQ,GADC,CACG,WADH,EAEDC,IAFC,CAEKC,WAAD,IAAiB;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BF,WAA1B;;AACA,QAAIA,WAAW,CAACG,EAAhB,EAAoB;AAChBG,MAAAA,eAAe,CAACV,IAAhB,GAAuBI,WAAW,CAACJ,IAAnC;AACH,KAFD,MAEO;AACHU,MAAAA,eAAe,CAACT,KAAhB,GAAwB,sBAAxB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCI,eAAe,CAACV,IAApD;AACH;AACJ,GAVC,EAWDQ,KAXC,CAWMP,KAAD,IAAW;AACdS,IAAAA,eAAe,CAACT,KAAhB,GAAwBA,KAAxB;AACH,GAbC,CAAN;AAcA,SAAOS,eAAP;AACH,CAjBM;AAkBP,OAAO,MAAME,aAAa,GAAG,YAAY;AACrC,MAAIC,cAAc,GAAG;AAAEb,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAArB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BO,cAA9B;AACA,QAAMnB,GAAG,CACJQ,GADC,CACG,QADH,EAEDC,IAFC,CAEKC,WAAD,IAAiB;AACnB,QAAIA,WAAW,CAACG,EAAhB,EAAoB;AAChBM,MAAAA,cAAc,CAACC,UAAf,GAA4BV,WAAW,CAACJ,IAAxC;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BF,WAAW,CAACJ,IAAtC;AACH,KAHD,MAGO;AACHa,MAAAA,cAAc,CAACZ,KAAf,GAAuB,sBAAvB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCO,cAAc,CAACb,IAAlD;AACH;AACJ,GAVC,EAWDQ,KAXC,CAWMP,KAAD,IAAW;AACdI,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCL,KAApC;AACAY,IAAAA,cAAc,CAACZ,KAAf,GAAuBA,KAAvB;AACH,GAdC,CAAN;AAeII,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BO,cAA1B;AACJ,SAAOA,cAAP;AACH,CApBM","sourcesContent":["import { create } from \"apisauce\";\nconst api = create({\n    baseURL: \"https://jsonplaceholder.typicode.com\",\n    headers: {\n        Accept: 'application/vnd.github.v3+json'\n    },\n});\nexport const getCardApi = async () => {\n    let response = { data: null, error: \"\" };\n    await api\n        .get(\"/posts\")\n        .then((apiResponse) => {\n            console.log(apiResponse);\n            if (apiResponse.ok) {\n                response.data = apiResponse.data;\n            } else {\n                response.error = \"Unable to fetch data\"\n                console.log(\"response data\", response.data);\n            }\n        })\n        .catch((error) => {\n            response.error = error;\n        })\n    return response;\n}\nexport const getCommentsApi = async () => {\n    let commentresponse = { commentdata: null, error: \"\" };\n    await api\n        .get(\"/comments\")\n        .then((apiResponse) => {\n            console.log(\"apiResponse\",apiResponse);\n            if (apiResponse.ok) {\n                commentresponse.data = apiResponse.data;\n            } else {\n                commentresponse.error = \"Unable to fetch data\"\n                console.log(\"commentresponse data\", commentresponse.data);\n            }\n        })\n        .catch((error) => {\n            commentresponse.error = error;\n        })\n    return commentresponse;\n}\nexport const getAuthorsApi = async () => {\n    let authorresponse = { data: null, error: \"\" };\n    console.log(\"authorresponse\", authorresponse);\n    await api\n        .get(\"/users\")\n        .then((apiResponse) => {\n            if (apiResponse.ok) {\n                authorresponse.authordata = apiResponse.data;\n                console.log(\"apiResponse\",apiResponse.data);\n            } else {\n                authorresponse.error = \"Unable to fetch data\"\n                console.log(\"authorresponse data\", authorresponse.data);\n            }\n        })\n        .catch((error) => {\n            console.log(\"authorresponse error\", error);\n            authorresponse.error = error;\n        });\n        console.log(\"apiResponse\",authorresponse);\n    return authorresponse;\n}"]},"metadata":{},"sourceType":"module"}