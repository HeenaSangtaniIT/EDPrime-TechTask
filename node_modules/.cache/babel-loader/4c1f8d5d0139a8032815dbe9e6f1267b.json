{"ast":null,"code":"import { put, call } from \"redux-saga/effects\";\nimport { cardActions } from \"./reducer\";\nimport { getCardApi, getCommentsApi } from \"../apisause\";\nexport function* getCardSaga() {\n  try {\n    let response;\n    response = yield call(getCardApi);\n\n    if (!response.error) {\n      yield put(cardActions.Creators.cardSuccess(response.data));\n    } else {\n      yield put(cardActions.Creators.cardFailure(response.error));\n    }\n  } catch (error) {\n    yield put(cardActions.Creators.cardFailure(error));\n  }\n}\nexport function* getCommentsSaga() {\n  try {\n    let response;\n    response = yield call(getCommentsApi);\n\n    if (!response.error) {\n      yield put(cardActions.Creators.commentsSuccess(response.data));\n    } else {\n      yield put(cardActions.Creators.commentsFailure(response.error));\n    }\n  } catch (error) {\n    yield put(cardActions.Creators.commentsFailure(error));\n  }\n}\nexport function* getAuthorsSaga() {\n  try {\n    let response;\n    response = yield call(getAuthorsApi);\n\n    if (!response.error) {\n      yield put(cardActions.Creators.authorsSuccess(response.data));\n    } else {\n      yield put(cardActions.Creators.authorsFailure(response.error));\n    }\n  } catch (error) {\n    yield put(cardActions.Creators.authorsFailure(error));\n  }\n}","map":{"version":3,"sources":["/Users/banshi/Documents/techTask1/techtask-1-app/src/card/saga.js"],"names":["put","call","cardActions","getCardApi","getCommentsApi","getCardSaga","response","error","Creators","cardSuccess","data","cardFailure","getCommentsSaga","commentsSuccess","commentsFailure","getAuthorsSaga","getAuthorsApi","authorsSuccess","authorsFailure"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,aAA3C;AAEA,OAAO,UAAUC,WAAV,GAAwB;AAC3B,MAAI;AACA,QAAIC,QAAJ;AACAA,IAAAA,QAAQ,GAAG,MAAML,IAAI,CAACE,UAAD,CAArB;;AACA,QAAI,CAACG,QAAQ,CAACC,KAAd,EAAqB;AACjB,YAAMP,GAAG,CAACE,WAAW,CAACM,QAAZ,CAAqBC,WAArB,CAAiCH,QAAQ,CAACI,IAA1C,CAAD,CAAT;AACH,KAFD,MAEO;AACH,YAAMV,GAAG,CAACE,WAAW,CAACM,QAAZ,CAAqBG,WAArB,CAAiCL,QAAQ,CAACC,KAA1C,CAAD,CAAT;AACH;AACJ,GARD,CAQE,OAAOA,KAAP,EAAc;AACZ,UAAMP,GAAG,CAACE,WAAW,CAACM,QAAZ,CAAqBG,WAArB,CAAiCJ,KAAjC,CAAD,CAAT;AACH;AACJ;AACD,OAAO,UAAUK,eAAV,GAA4B;AAC/B,MAAI;AACA,QAAIN,QAAJ;AACAA,IAAAA,QAAQ,GAAG,MAAML,IAAI,CAACG,cAAD,CAArB;;AACA,QAAI,CAACE,QAAQ,CAACC,KAAd,EAAqB;AACjB,YAAMP,GAAG,CAACE,WAAW,CAACM,QAAZ,CAAqBK,eAArB,CAAqCP,QAAQ,CAACI,IAA9C,CAAD,CAAT;AACH,KAFD,MAEO;AACH,YAAMV,GAAG,CAACE,WAAW,CAACM,QAAZ,CAAqBM,eAArB,CAAqCR,QAAQ,CAACC,KAA9C,CAAD,CAAT;AACH;AACJ,GARD,CAQE,OAAOA,KAAP,EAAc;AACZ,UAAMP,GAAG,CAACE,WAAW,CAACM,QAAZ,CAAqBM,eAArB,CAAqCP,KAArC,CAAD,CAAT;AACH;AACJ;AACD,OAAO,UAAUQ,cAAV,GAA2B;AAC9B,MAAI;AACA,QAAIT,QAAJ;AACAA,IAAAA,QAAQ,GAAG,MAAML,IAAI,CAACe,aAAD,CAArB;;AACA,QAAI,CAACV,QAAQ,CAACC,KAAd,EAAqB;AACjB,YAAMP,GAAG,CAACE,WAAW,CAACM,QAAZ,CAAqBS,cAArB,CAAoCX,QAAQ,CAACI,IAA7C,CAAD,CAAT;AACH,KAFD,MAEO;AACH,YAAMV,GAAG,CAACE,WAAW,CAACM,QAAZ,CAAqBU,cAArB,CAAoCZ,QAAQ,CAACC,KAA7C,CAAD,CAAT;AACH;AACJ,GARD,CAQE,OAAOA,KAAP,EAAc;AACZ,UAAMP,GAAG,CAACE,WAAW,CAACM,QAAZ,CAAqBU,cAArB,CAAoCX,KAApC,CAAD,CAAT;AACH;AACJ","sourcesContent":["import { put, call } from \"redux-saga/effects\";\nimport { cardActions } from \"./reducer\";\nimport { getCardApi, getCommentsApi } from \"../apisause\";\n\nexport function* getCardSaga() {\n    try {\n        let response;\n        response = yield call(getCardApi)\n        if (!response.error) {\n            yield put(cardActions.Creators.cardSuccess(response.data))\n        } else {\n            yield put(cardActions.Creators.cardFailure(response.error))\n        }\n    } catch (error) {\n        yield put(cardActions.Creators.cardFailure(error))\n    }\n}\nexport function* getCommentsSaga() {\n    try {\n        let response;\n        response = yield call(getCommentsApi)\n        if (!response.error) {\n            yield put(cardActions.Creators.commentsSuccess(response.data))\n        } else {\n            yield put(cardActions.Creators.commentsFailure(response.error))\n        }\n    } catch (error) {\n        yield put(cardActions.Creators.commentsFailure(error))\n    }\n}\nexport function* getAuthorsSaga() {\n    try {\n        let response;\n        response = yield call(getAuthorsApi)\n        if (!response.error) {\n            yield put(cardActions.Creators.authorsSuccess(response.data))\n        } else {\n            yield put(cardActions.Creators.authorsFailure(response.error))\n        }\n    } catch (error) {\n        yield put(cardActions.Creators.authorsFailure(error))\n    }\n}"]},"metadata":{},"sourceType":"module"}