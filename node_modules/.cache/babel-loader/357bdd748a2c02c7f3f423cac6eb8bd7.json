{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/banshi/Documents/techTask1/techtask-1-app/src/card_screen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { cardActions } from \"./card/reducer\";\nimport Posts from \"./components/posts/Posts\";\nimport AuthorScreen from './author_screen';\nimport CommentScreen from './comment_screen';\nimport \"./posts.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst CardScreen = ({\n  data,\n  error,\n  isLoading,\n  card\n}) => {\n  _s();\n\n  console.log(\"data\", data);\n  useEffect(() => {\n    card();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navBar\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Posts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/comments/1\",\n              children: \"Comments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/users\",\n              children: \"Authors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/comments\",\n          children: /*#__PURE__*/_jsxDEV(CommentScreen, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/users\",\n          children: /*#__PURE__*/_jsxDEV(AuthorScreen, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mainDivPost\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Posts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this), data.map(item => {\n              return /*#__PURE__*/_jsxDEV(Posts, {\n                postTitle: item.title,\n                postBody: item.body,\n                postId: item.id,\n                userId: item.userId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardScreen, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CardScreen;\n\nconst mapStateToProps = ({\n  card\n}) => {\n  const {\n    data,\n    error,\n    isLoading\n  } = card;\n  return {\n    data,\n    error,\n    isLoading\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({ ...bindActionCreators({ ...cardActions.Creators\n  }, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardScreen);\n\nvar _c;\n\n$RefreshReg$(_c, \"CardScreen\");","map":{"version":3,"sources":["/Users/banshi/Documents/techTask1/techtask-1-app/src/card_screen.js"],"names":["React","useEffect","connect","bindActionCreators","cardActions","Posts","AuthorScreen","CommentScreen","BrowserRouter","Router","Switch","Route","Link","CardScreen","data","error","isLoading","card","console","log","map","item","title","body","id","userId","mapStateToProps","mapDispatchToProps","dispatch","Creators"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { cardActions } from \"./card/reducer\";\nimport Posts from \"./components/posts/Posts\";\nimport AuthorScreen from './author_screen';\nimport CommentScreen from './comment_screen';\nimport \"./posts.css\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\n\n\nconst CardScreen = ({ data, error, isLoading, card }) => {\n  console.log(\"data\", data);\n  useEffect(() => {\n    card();\n  }, []);\n  return (\n    <Router>\n      <div>\n        <nav className=\"navBar\">\n          <ul>\n            <li>\n              <Link to=\"/\">Posts</Link>\n            </li>\n            <li>\n              <Link to=\"/comments/1\">Comments</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Authors</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/comments\">\n            <CommentScreen />\n          </Route>\n          <Route path=\"/users\">\n            <AuthorScreen />\n          </Route>\n          <Route path=\"/\">\n            <div className=\"mainDivPost\">\n              <h4>Posts</h4>\n              {data.map(item => {\n                return (\n                  <Posts\n                    postTitle={item.title}\n                    postBody={item.body}\n                    postId={item.id}\n                    userId={item.userId}\n                  />\n                );\n              })}\n            </div>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n    \n  );\n};\nconst mapStateToProps = ({ card }) => {\n  const { data, error, isLoading } = card;\n  return { data, error, isLoading };\n};\nconst mapDispatchToProps = dispatch => ({\n  ...bindActionCreators(\n    {\n      ...cardActions.Creators\n    },\n    dispatch\n  )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardScreen);\n"]},"metadata":{},"sourceType":"module"}